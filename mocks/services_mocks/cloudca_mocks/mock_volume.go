// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./services/cloudca/volume.go

package cloudca_mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of VolumeService interface
type MockVolumeService struct {
	ctrl     *gomock.Controller
	recorder *_MockVolumeServiceRecorder
}

// Recorder for MockVolumeService (not exported)
type _MockVolumeServiceRecorder struct {
	mock *MockVolumeService
}

func NewMockVolumeService(ctrl *gomock.Controller) *MockVolumeService {
	mock := &MockVolumeService{ctrl: ctrl}
	mock.recorder = &_MockVolumeServiceRecorder{mock}
	return mock
}

func (_m *MockVolumeService) EXPECT() *_MockVolumeServiceRecorder {
	return _m.recorder
}

func (_m *MockVolumeService) Get(id string) (*Volume, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVolumeServiceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockVolumeService) List() ([]Volume, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVolumeServiceRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockVolumeService) ListOfType(volumeType string) ([]Volume, error) {
	ret := _m.ctrl.Call(_m, "ListOfType", volumeType)
	ret0, _ := ret[0].([]Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVolumeServiceRecorder) ListOfType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListOfType", arg0)
}

func (_m *MockVolumeService) ListWithOptions(options map[string]string) ([]Volume, error) {
	ret := _m.ctrl.Call(_m, "ListWithOptions", options)
	ret0, _ := ret[0].([]Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVolumeServiceRecorder) ListWithOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListWithOptions", arg0)
}
