// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./services/cloudca/ssh_key.go

package cloudca_mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of SSHKeyService interface
type MockSSHKeyService struct {
	ctrl     *gomock.Controller
	recorder *_MockSSHKeyServiceRecorder
}

// Recorder for MockSSHKeyService (not exported)
type _MockSSHKeyServiceRecorder struct {
	mock *MockSSHKeyService
}

func NewMockSSHKeyService(ctrl *gomock.Controller) *MockSSHKeyService {
	mock := &MockSSHKeyService{ctrl: ctrl}
	mock.recorder = &_MockSSHKeyServiceRecorder{mock}
	return mock
}

func (_m *MockSSHKeyService) EXPECT() *_MockSSHKeyServiceRecorder {
	return _m.recorder
}

func (_m *MockSSHKeyService) Get(name string) (*SSHKey, error) {
	ret := _m.ctrl.Call(_m, "Get", name)
	ret0, _ := ret[0].(*SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSHKeyServiceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockSSHKeyService) List() ([]SSHKey, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSHKeyServiceRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockSSHKeyService) ListWithOptions(options map[string]string) ([]SSHKey, error) {
	ret := _m.ctrl.Call(_m, "ListWithOptions", options)
	ret0, _ := ret[0].([]SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSHKeyServiceRecorder) ListWithOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListWithOptions", arg0)
}
