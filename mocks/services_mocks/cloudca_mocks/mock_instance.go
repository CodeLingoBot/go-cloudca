// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./services/cloudca/instance.go

package cloudca_mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of InstanceService interface
type MockInstanceService struct {
	ctrl     *gomock.Controller
	recorder *_MockInstanceServiceRecorder
}

// Recorder for MockInstanceService (not exported)
type _MockInstanceServiceRecorder struct {
	mock *MockInstanceService
}

func NewMockInstanceService(ctrl *gomock.Controller) *MockInstanceService {
	mock := &MockInstanceService{ctrl: ctrl}
	mock.recorder = &_MockInstanceServiceRecorder{mock}
	return mock
}

func (_m *MockInstanceService) EXPECT() *_MockInstanceServiceRecorder {
	return _m.recorder
}

func (_m *MockInstanceService) Get(id string) (*Instance, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockInstanceService) List() ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockInstanceService) ListWithOptions(options map[string]string) ([]Instance, error) {
	ret := _m.ctrl.Call(_m, "ListWithOptions", options)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) ListWithOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListWithOptions", arg0)
}

func (_m *MockInstanceService) Create(_param0 Instance) (*Instance, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockInstanceService) Destroy(id string, purge bool) (bool, error) {
	ret := _m.ctrl.Call(_m, "Destroy", id, purge)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Destroy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy", arg0, arg1)
}

func (_m *MockInstanceService) Purge(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Purge", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Purge(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Purge", arg0)
}

func (_m *MockInstanceService) Recover(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Recover", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Recover(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recover", arg0)
}

func (_m *MockInstanceService) Exists(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Exists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Exists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", arg0)
}

func (_m *MockInstanceService) Start(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Start", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockInstanceService) Stop(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Stop", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Stop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop", arg0)
}

func (_m *MockInstanceService) AssociateSSHKey(id string, sshKeyName string) (bool, error) {
	ret := _m.ctrl.Call(_m, "AssociateSSHKey", id, sshKeyName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) AssociateSSHKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssociateSSHKey", arg0, arg1)
}

func (_m *MockInstanceService) Reboot(id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Reboot", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) Reboot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reboot", arg0)
}

func (_m *MockInstanceService) ChangeComputeOffering(id string, newComputeOfferingId string) (bool, error) {
	ret := _m.ctrl.Call(_m, "ChangeComputeOffering", id, newComputeOfferingId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) ChangeComputeOffering(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangeComputeOffering", arg0, arg1)
}

func (_m *MockInstanceService) ResetPassword(id string) (string, error) {
	ret := _m.ctrl.Call(_m, "ResetPassword", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) ResetPassword(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetPassword", arg0)
}

func (_m *MockInstanceService) CreateRecoveryPoint(id string, recoveryPoint RecoveryPoint) (bool, error) {
	ret := _m.ctrl.Call(_m, "CreateRecoveryPoint", id, recoveryPoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInstanceServiceRecorder) CreateRecoveryPoint(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRecoveryPoint", arg0, arg1)
}
