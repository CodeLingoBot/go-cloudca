// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./services/cloudca/template.go

package cloudca_mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of TemplateService interface
type MockTemplateService struct {
	ctrl     *gomock.Controller
	recorder *_MockTemplateServiceRecorder
}

// Recorder for MockTemplateService (not exported)
type _MockTemplateServiceRecorder struct {
	mock *MockTemplateService
}

func NewMockTemplateService(ctrl *gomock.Controller) *MockTemplateService {
	mock := &MockTemplateService{ctrl: ctrl}
	mock.recorder = &_MockTemplateServiceRecorder{mock}
	return mock
}

func (_m *MockTemplateService) EXPECT() *_MockTemplateServiceRecorder {
	return _m.recorder
}

func (_m *MockTemplateService) Get(id string) (*Template, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTemplateServiceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockTemplateService) List() ([]Template, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTemplateServiceRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockTemplateService) ListWithOptions(options map[string]string) ([]Template, error) {
	ret := _m.ctrl.Call(_m, "ListWithOptions", options)
	ret0, _ := ret[0].([]Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTemplateServiceRecorder) ListWithOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListWithOptions", arg0)
}
